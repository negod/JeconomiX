/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package se.backede.jeconomix.forms.company;

import java.awt.event.ItemEvent;
import java.util.HashSet;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import se.backede.jeconomix.constants.CategoryTypeEnum;
import se.backede.jeconomix.constants.ComboBoxRenderer;
import se.backede.jeconomix.database.CategoryHandler;
import se.backede.jeconomix.database.CompanyHandler;
import se.backede.jeconomix.dto.CategoryDto;
import se.backede.jeconomix.dto.CompanyDto;
import se.backede.jeconomix.event.EventController;
import se.backede.jeconomix.event.events.CategoryEvent;
import se.backede.jeconomix.models.combobox.CategoryComboBoxModel;
import se.backede.jeconomix.models.table.CompanyModel;
import se.backede.jeconomix.renderer.combobox.CategoryItemRenderer;

/**
 *
 * @author Joakim Backede ( joakim.backede@outlook.com )
 */
public class CompanyEditTable extends javax.swing.JPanel {

    /**
     * Creates new form CompanyEditTable
     */
    public CompanyEditTable() {
        initComponents();
        setEvents();
    }

    public void setUpCategoryDropDownColumn(TableColumn column, CategoryTypeEnum type) {
        JComboBox<CategoryDto> comboBox = new JComboBox<>();

        comboBox.<CategoryComboBoxModel>setModel(new CategoryComboBoxModel(type));
        comboBox.<CategoryItemRenderer>setRenderer(new CategoryItemRenderer(ComboBoxRenderer.SINGLE));
        column.setCellEditor(new DefaultCellEditor(comboBox));

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click to edit Category");
        column.setCellRenderer(renderer);

        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryComboBoxItemStateChanged(evt);
            }
        });
    }

    private void categoryComboBoxItemStateChanged(ItemEvent evt) {
        CompanyModel model = (CompanyModel) companyTable.getModel();
        CompanyDto company = model.getCompanyAt(companyTable.getSelectedRow());
        company.setCategory((CategoryDto) evt.getItem());
        CompanyHandler.getInstance().setCategory(company, (CategoryDto) evt.getItem());
    }

    public void setTableDataFromCategory(CategoryDto category, CategoryTypeEnum categoryType) {

        CategoryHandler.getInstance().getFilteredCategories(categoryType).map(categories -> {
            Set<CompanyDto> companies = new HashSet<>();
            for (CategoryDto categoryDto : categories) {
                if (category == null) {
                    companies.addAll(categoryDto.getCompanies());
                } else {
                    if (categoryDto.getId().equals(category.getId())) {
                        companies.addAll(categoryDto.getCompanies());
                    }
                }

            }
            return companies;

        }).ifPresent(companyList -> {

            CompanyModel companyModel = new CompanyModel(companyList.stream().collect(Collectors.toList()));
            companyTable.setModel(companyModel);
            setUpCategoryDropDownColumn(companyTable.getColumnModel().getColumn(1), categoryType);

            if (!companyList.isEmpty()) {
                companyTable.setRowSelectionInterval(0, 0);
                CompanyDto selectedCompany = companyModel.getCompanyAt(0);
            }
            companyTable.setModel(companyModel);
            setUpCategoryDropDownColumn(companyTable.getColumnModel().getColumn(1), categoryType);

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        companyTable = new javax.swing.JTable();

        companyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(companyTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable companyTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setEvents() {

        Consumer<CategoryTypeEnum> setSelectedCategoryType = categoryType -> {
            if (categoryType != null) {
                setTableDataFromCategory(null, categoryType);
            }
        };
        EventController.getInstance().addObserver(CategoryEvent.CATEGORY_TYPE_SELECTED, setSelectedCategoryType);

        Consumer<CategoryDto> setSelectedCategory = category -> {
            if (category != null) {
                setTableDataFromCategory(category, category.getCategoryType().getType());
            }
        };
        EventController.getInstance().addObserver(CategoryEvent.SELECTED, setSelectedCategory);

    }
}
