/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package se.backede.jeconomix.forms;

import com.backede.fileutils.csv.reader.CsvReaderHandler;
import com.backede.fileutils.exception.BeckedeFileException;
import com.backede.fileutils.csv.parser.Normalizer;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.csv.CSVRecord;
import se.backede.jeconomix.dto.CompanyDto;
import se.backede.jeconomix.dto.TransactionDto;
import se.backede.jeconomix.event.EventController;
import se.backede.jeconomix.event.EventObserver;
import se.backede.jeconomix.event.NegodEvent;
import se.backede.jeconomix.database.CacheInitializer;
import se.backede.jeconomix.database.CompanyHandler;
import se.backede.jeconomix.database.TransactionHandler;
import se.backede.jeconomix.database.entity.extractor.TransactionExtractor;
import se.backede.jeconomix.exporter.CompanyExporter;
import se.backede.jeconomix.exporter.ExpenseCategoryExporter;
import se.backede.jeconomix.importer.CompanyImporter;
import se.backede.jeconomix.importer.ExpenseCategoryImporter;
import se.backede.jeconomix.importer.ExpenseImporter;

/**
 *
 * @author Joakim Backede ( joakim.backede@outlook.com )
 */
@Slf4j
public class Main extends javax.swing.JFrame implements EventObserver {

    private CacheInitializer cache = new CacheInitializer();

    /**
     * Creates new form NewApplication
     */
    public Main() {
        initComponents();
        registerAsObserver();
        test();
    }

    public void test() {
        add(new BudgetMonth());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        importerMenu = new javax.swing.JMenu();
        importExpensesMenuItem = new javax.swing.JMenuItem();
        importMenu = new javax.swing.JMenu();
        importExpCatMenuitem = new javax.swing.JMenuItem();
        importCompanyMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        exportCompanies = new javax.swing.JMenuItem();
        exportExpenses = new javax.swing.JMenuItem();
        exportExpenseTypes = new javax.swing.JMenuItem();
        exportBills = new javax.swing.JMenuItem();
        exportBillTypes = new javax.swing.JMenuItem();
        exportAll = new javax.swing.JMenuItem();
        handleListMenu = new javax.swing.JMenu();
        expenseCategoryMenuItem = new javax.swing.JMenuItem();
        handleCompaniesMenuItem = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        expenseReportMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        reindecLuceneMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        importerMenu.setText("Import");
        importerMenu.setToolTipText("");

        importExpensesMenuItem.setText("Expenses");
        importExpensesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExpensesMenuItemActionPerformed(evt);
            }
        });
        importerMenu.add(importExpensesMenuItem);

        importMenu.setText("Listdata");

        importExpCatMenuitem.setText("Expense categories");
        importExpCatMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExpCatMenuitemActionPerformed(evt);
            }
        });
        importMenu.add(importExpCatMenuitem);

        importCompanyMenuItem.setText("Companies");
        importCompanyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCompanyMenuItemActionPerformed(evt);
            }
        });
        importMenu.add(importCompanyMenuItem);

        importerMenu.add(importMenu);

        menuBar.add(importerMenu);

        jMenu2.setText("Export");

        exportCompanies.setText("Companies");
        exportCompanies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCompaniesActionPerformed(evt);
            }
        });
        jMenu2.add(exportCompanies);

        exportExpenses.setText("Expenses");
        jMenu2.add(exportExpenses);

        exportExpenseTypes.setText("Expense categories");
        exportExpenseTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExpenseTypesActionPerformed(evt);
            }
        });
        jMenu2.add(exportExpenseTypes);

        exportBills.setText("Bills");
        jMenu2.add(exportBills);

        exportBillTypes.setText("Bill categories");
        jMenu2.add(exportBillTypes);

        exportAll.setText("All");
        jMenu2.add(exportAll);

        menuBar.add(jMenu2);

        handleListMenu.setText("Handle lists");

        expenseCategoryMenuItem.setText("Expense categories");
        expenseCategoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseCategoryMenuItemActionPerformed(evt);
            }
        });
        handleListMenu.add(expenseCategoryMenuItem);

        handleCompaniesMenuItem.setText("Companies");
        handleCompaniesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleCompaniesMenuItemActionPerformed(evt);
            }
        });
        handleListMenu.add(handleCompaniesMenuItem);

        menuBar.add(handleListMenu);

        reportMenu.setText("Reports");

        expenseReportMenuItem.setText("Expense report");
        expenseReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(expenseReportMenuItem);

        menuBar.add(reportMenu);

        jMenu1.setText("Admin");

        reindecLuceneMenuItem.setText("Reindex lucene");
        reindecLuceneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reindecLuceneMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(reindecLuceneMenuItem);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 623, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void importExpensesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExpensesMenuItemActionPerformed
        Optional<String> csvFilePath = FileChooser.getInstance().getCsvFilePath(JFileChooser.FILES_AND_DIRECTORIES);
        if (csvFilePath.isPresent()) {
            ProgressDialog progressBar = new ProgressDialog(this, false, ProgressDialog.IMPORT);
            progressBar.setLocationRelativeTo(this);
            progressBar.setVisible(true);
            ExpenseImporter.getInstance().importExpensesFromCSV(csvFilePath.get(), this);
        }
    }//GEN-LAST:event_importExpensesMenuItemActionPerformed

    private void importExpCatMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExpCatMenuitemActionPerformed
        Optional<String> filePath = FileChooser.getInstance().getXmlFilePath(JFileChooser.FILES_AND_DIRECTORIES);
        if (filePath.isPresent()) {
            ProgressDialog progressBar = new ProgressDialog(this, false, ProgressDialog.IMPORT);
            progressBar.setLocationRelativeTo(this);
            progressBar.setVisible(true);
            ExpenseCategoryImporter.getInstance().importExpenseCategories(filePath.get());
        }
    }//GEN-LAST:event_importExpCatMenuitemActionPerformed

    private void importCompanyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCompanyMenuItemActionPerformed
        Optional<String> filePath = FileChooser.getInstance().getXmlFilePath(JFileChooser.FILES_AND_DIRECTORIES);
        if (filePath.isPresent()) {

            if (filePath.isPresent()) {
                ProgressDialog progressBar = new ProgressDialog(this, false, ProgressDialog.IMPORT);
                progressBar.setLocationRelativeTo(this);
                progressBar.setVisible(true);

                String path = filePath.get();
                CompanyImporter.getInstance().importCompanies(path);
            }
        }
    }//GEN-LAST:event_importCompanyMenuItemActionPerformed

    private void expenseCategoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseCategoryMenuItemActionPerformed
        new AddExpCategory(this, Boolean.TRUE).setVisible(true);
    }//GEN-LAST:event_expenseCategoryMenuItemActionPerformed

    private void expenseReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseReportMenuItemActionPerformed
        new expenseReport(this, true).setVisible(true);
    }//GEN-LAST:event_expenseReportMenuItemActionPerformed

    private void reindecLuceneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reindecLuceneMenuItemActionPerformed
        CompanyHandler.getInstance().reIndex();
    }//GEN-LAST:event_reindecLuceneMenuItemActionPerformed

    private void handleCompaniesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleCompaniesMenuItemActionPerformed
        new CompanyEditor(this, true).setVisible(true);
    }//GEN-LAST:event_handleCompaniesMenuItemActionPerformed

    private void exportCompaniesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCompaniesActionPerformed
        Optional<String> filePath = FileChooser.getInstance().getXmlFilePath(JFileChooser.DIRECTORIES_ONLY);
        if (filePath.isPresent()) {
            ProgressDialog progressBar = new ProgressDialog(this, false, ProgressDialog.EXPORT);
            progressBar.setLocationRelativeTo(this);
            progressBar.setVisible(true);

            CompanyExporter.getInstance().exportCompanies(filePath.get() + "//companies.xml");
        }
    }//GEN-LAST:event_exportCompaniesActionPerformed

    private void exportExpenseTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExpenseTypesActionPerformed
        Optional<String> filePath = FileChooser.getInstance().getXmlFilePath(JFileChooser.DIRECTORIES_ONLY);
        if (filePath.isPresent()) {
            ProgressDialog progressBar = new ProgressDialog(this, false, ProgressDialog.EXPORT);
            progressBar.setLocationRelativeTo(this);
            progressBar.setVisible(true);

            ExpenseCategoryExporter.getInstance().exportExpenseCategories(filePath.get() + "//expense_categories.xml");
        }
    }//GEN-LAST:event_exportExpenseTypesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem expenseCategoryMenuItem;
    private javax.swing.JMenuItem expenseReportMenuItem;
    private javax.swing.JMenuItem exportAll;
    private javax.swing.JMenuItem exportBillTypes;
    private javax.swing.JMenuItem exportBills;
    private javax.swing.JMenuItem exportCompanies;
    private javax.swing.JMenuItem exportExpenseTypes;
    private javax.swing.JMenuItem exportExpenses;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem handleCompaniesMenuItem;
    private javax.swing.JMenu handleListMenu;
    private javax.swing.JMenuItem importCompanyMenuItem;
    private javax.swing.JMenuItem importExpCatMenuitem;
    private javax.swing.JMenuItem importExpensesMenuItem;
    private javax.swing.JMenu importMenu;
    private javax.swing.JMenu importerMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem reindecLuceneMenuItem;
    private javax.swing.JMenu reportMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(NegodEvent event) {
//        if (event.equalsEvent(ExpenseCategoryEvent.CREATE)) {
//            String value;
//            if (event.getValues().get(ExpenseCategoryValues.NAME).getString().isPresent()) {
//                ExpenseCategoryDto category = new ExpenseCategoryDto();
//                category.setName(event.getValues().get(ExpenseCategoryValues.NAME).getString().get());
//                ExpenseCategoryHandler.getInstance().createExpenseCategory(category);
//                setExpenseCategoryComboBoxData();
//            }
//        } else if (event.equalsEvent(TransactionEvent.CREATE)) {
//            setTableData();
//        }
    }

    @Override
    public void registerAsObserver() {
        EventController.getInstance().addObserver(this);
    }

}
